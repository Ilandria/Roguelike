#pragma kernel AddCurrentFrameVision

Texture2D<float4> currentFrameVisionTex;
RWTexture2D<float4> persistentVisionTex;
float2 worldSpaceCamPos;
uint persistentVisionTexSize;
uint currentFrameVisionTexSize;

// Total width of world in game units.
uint worldSize;

// Total number of threads dispatched along one axis.
#define THREAD_COUNT 16

[numthreads(THREAD_COUNT,THREAD_COUNT,1)]
void AddCurrentFrameVision (uint3 threadId : SV_DispatchThreadID)
{
    int2 targetUv = (int2)((threadId.xy / (float)THREAD_COUNT) * currentFrameVisionTexSize);
    float currentFrameVision = currentFrameVisionTex.Load(int3(targetUv, 0)).r;

    float2 centerUv = worldSpaceCamPos / worldSize + 0.5f;
    float2 fogQuadUvWidth = 16.0f / worldSize; // 16 = scale of fog quad on player object.
    float2 bottomLeftUv = centerUv - fogQuadUvWidth / 2.0f;
    float2 uvIncrement = fogQuadUvWidth / THREAD_COUNT;
    targetUv = (int2)((bottomLeftUv + uvIncrement * threadId.xy) * persistentVisionTexSize);
    float persistentVision = persistentVisionTex.Load(int3(targetUv, 0)).r;

    persistentVisionTex[targetUv] = float4(max(persistentVision, currentFrameVision), 0, 0, 0);
}
