#pragma kernel AddCurrentFrameVision

Texture2D<float4> currentFrameVisionTex;
RWTexture2D<float4> persistentVisionTex;
float2 worldSpaceCamPos;
uint persistentVisionTexSize;
uint currentFrameVisionTexSize;

// X scale of the fog quad on the player object.
float fogQuadScale;

// Total width of world in game units.
uint worldSize;

// Total number of threads dispatched along one axis.
#define THREAD_COUNT 16

[numthreads(THREAD_COUNT,THREAD_COUNT,1)]
void AddCurrentFrameVision (uint3 threadId : SV_DispatchThreadID)
{
    int3 targetUv = int3(0, 0, 0);

    // Todo: Better interpolation/higher resolution - fog looks like crap atm.
    targetUv.xy = (int2)((threadId.xy / (float)THREAD_COUNT) * currentFrameVisionTexSize);
    float currentFrameVision = currentFrameVisionTex.Load(targetUv).r;

    float2 centerUv = worldSpaceCamPos / worldSize + 0.5f;
    float2 fogQuadUvWidth = fogQuadScale / worldSize;
    float2 bottomLeftUv = centerUv - fogQuadUvWidth / 2.0f;
    float2 uvIncrement = fogQuadUvWidth / THREAD_COUNT;
    targetUv.xy = (int2)((bottomLeftUv + uvIncrement * threadId.xy) * persistentVisionTexSize);
    float persistentVision = persistentVisionTex.Load(targetUv.xy).r;

    persistentVisionTex[targetUv.xy] = float4(max(persistentVision, currentFrameVision), 0, 0, 0);
}
